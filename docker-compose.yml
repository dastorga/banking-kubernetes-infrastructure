# Banking K8s Infrastructure - Docker Compose for Local Development
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: banking-postgres
    environment:
      POSTGRES_DB: banking_db
      POSTGRES_USER: banking_user
      POSTGRES_PASSWORD: secure_password_123
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - banking-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U banking_user -d banking_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: banking-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - banking-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Banking Backend API
  banking-backend:
    build:
      context: ./app/backend
      dockerfile: Dockerfile
    container_name: banking-backend
    environment:
      - DATABASE_URL=postgresql://banking_user:secure_password_123@postgres:5432/banking_db
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=super-secret-jwt-key-for-banking-app-2024
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    volumes:
      - ./app/backend:/app
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - banking-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./app/backend
          target: /app
          ignore:
            - __pycache__/
        - action: rebuild
          path: ./app/backend/requirements.txt

  # Banking Frontend
  banking-frontend:
    build:
      context: ./app/frontend
      dockerfile: Dockerfile
    container_name: banking-frontend
    ports:
      - "3000:80"
    volumes:
      - ./app/frontend/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - banking-backend
    networks:
      - banking-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    develop:
      watch:
        - action: sync+restart
          path: ./app/frontend/
          target: /usr/share/nginx/html/
          ignore:
            - nginx.conf
            - Dockerfile

  # Nginx Reverse Proxy (optional - for production-like setup)
  nginx-proxy:
    image: nginx:1.25-alpine
    container_name: banking-nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - banking-frontend
      - banking-backend
    networks:
      - banking-network
    profiles:
      - production
    restart: unless-stopped

  # Adminer - Database Management Tool (Development only)
  adminer:
    image: adminer:4.8.1
    container_name: banking-adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - banking-network
    profiles:
      - development
    restart: unless-stopped

  # Redis Commander - Redis Management Tool (Development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: banking-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - banking-network
    profiles:
      - development
    restart: unless-stopped

  # Prometheus - Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: banking-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - banking-network
    profiles:
      - monitoring
    restart: unless-stopped

  # Grafana - Dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: banking-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - banking-network
    profiles:
      - monitoring
    restart: unless-stopped

# Named Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  banking-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16